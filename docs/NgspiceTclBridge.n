'\"
'\" '\" Copyright (c) George Yashin
'\"
.TH "NgspiceTclBridge" 3tcl 0\&.1 "NgspiceTclBridge" "Tcl NgspiceTclBridge package"
.SH NAME
Introduction - Tcl NgspiceTclBridge package
.SH "NGSPICETCLBRIDGE - DRIVE NGSPICE (SHARED LIBRARY) FROM TCL"
.PP
ngspicetclbridge is a Tcl C extension that embeds Ngspice (built as a shared library) and exposes a small,
thread-safe command API for loading circuits, running analyses in the ngspice background thread, and receiving
data/messages/events back into Tcl\&.
.PP
It targets Tcl 9\&.0 and works on Linux/macOS/Windows\&. Dynamic loading is abstracted via a tiny portability layer\&.
.SH "WHAT IT GIVES YOU (AT A GLANCE)"
.TP
\(bu
Create one or more ngspice instances inside Tcl\&.
.TP
\(bu
Issue ngspice commands (e\&.g\&. bg_run, circbyline \&.\&.\&.)\&.
.TP
\(bu
Wait for events (send_stat, send_data, etc\&.) with optional timeouts\&.
.TP
\(bu
Collect messages from ngspice stdout/stderr\&.
.TP
\(bu
Fetch vector metadata and values (both asynchronously collected and on-demand)\&.
.PP
All Ngspice → Tcl crossings are deferred onto Tcl’s event loop, so you stay in the safe thread\&.
.SH "BUILDING & REQUIREMENTS"
.PP
Requirements:
.TP
\(bu
ngspice built as a shared library (e\&.g\&. libngspice\&.so, libngspice\&.dylib, or libngspice\&.dll) with the sharedspice interface (sharedspice\&.h)\&.
.TP
\(bu
Tcl headers/libs (9\&.0)\&.
.PP
To install, run following commands:
.TP
\(bu
git clone https://github\&.com/georgtree/NgspiceTclBridge\&.git
.TP
\(bu
\&./configure
.TP
\(bu
sudo make install
.PP
During installation manpages are also installed\&.
.PP
For test package in place run make test\&.
.PP
For package uninstall run sudo make uninstall\&.
.SH DOCUMENTATION
.PP
Documentation could be found \fIhere\fP [URL: https://georgtree\&.github\&.io/NgspiceTclBridge/]\&.
.SH NOTES
.PP
The commands that are subcommand to the simulator command, like $s1 command bg_run are considered low level
and communicate/interact directly with the simulator\&. On the other side, commands that accept simulator as a
parameter are considered as "helper" commands, built on top of low-level commands\&.
.SH WARNINGS
.PP
This library should be considere semi-stable now\&. It works well for \fBsingle\fP loading of shared library per
process, without unloading and loading again\&. It also works with multiple unloadings (destroying) and loadings of
the same library, but I've encountered a few possible memory corruption cases\&. I am trying my best to eliminate
them, but I am not in full control of Ngspice shared library behaviour\&.
.PP
One of the instances I've encountered is the running two circuit in sequence, with pattern load circuit->run->load
circuit->run, and then try destroying the instance\&. This could lead to segmentation violation, unless the command
remcirc for unloading previous circuit is issued before loading new circuit\&. It is done automatically now if you
previously loaded the circuit with circuit command\&. But in case you want to load circuit with command
circbyline, you need to issue remcirc command yourself\&.
.SH "QUICK START (SYNCHRONOUS OPERATION)"
.PP
Package loading and initialization:
.PP
.RS 4n
.nf
package require ngspicetclbridge

# Path to your ngspice shared library
set ngspiceLibPath /path/to/libngspice\&.so

# Create a new instance bound to a Tcl command
set sim [ngspicetclbridge::new $ngspiceLibPath]
.fi
.RE
.PP
Pass resistor divider circuit to Ngspice, and start the run (in background thread), and wait for completion:
.PP
.RS 4n
.nf
$sim circuit [split $resDivCircuit \\n]
run $sim
.fi
.RE
.PP
Get vector data dictionary saved in internal buffer:
.PP
.RS 4n
.nf
$sim vectors
.fi
.RE
.PP
Destroy instance of simulator (removes instance command, frees internal storages and simulator context)
.PP
.RS 4n
.nf
$sim destroy
.fi
.RE
.PP
If you want to continue work with current simulator instance, you need to clear internal messages storage
with next commands:
.PP
.RS 4n
.nf
$s1 messages -clear
.fi
.RE
.PP
Vector storage is resetted after run new simulation, so no need to explicitly frees vectors data\&.

