 
namespace eval ::ngspicetclbridge {

    proc new {path} {
        # Load dynamic library, path should be provided in native form for target OS.  Every `::ngspicetclbridge::new`
        # returns a command (e.g. `::ngspicetclbridge::s1`). The following subcommands operate on that instance.
        #  path -  absolute full path to dynamic library
        # Returns: command name to work with Ngspice instance
        #
        # Example:
        #```
        # set sim [::ngspicetclbridge::new /usr/local/lib/libngspice.so]
        #```
    }
    
    proc init {} {
        # Initializes the ngspice shared instance and the bridge’s data structures.
        # Returns: Ngspice init code
        #
        # Example:
        #```
        # $sim init
        #```
    }

    proc command {string} {
        # Sends an arbitrary Ngspice command line (e.g., `bg_run`, `circbyline` ..., `.save`, `.tran`, `.dc`). If
        # we provide `-capture` switch, it returns not only the result code, but also the next message from stdout
        # of Ngspice. Also, if command is send in the moment background thread is starting or stopping, it will be
        # deferred to the time is could be safely sent, and in that case `-capture` message and command results code
        # are not availaible as a return of `command`.
        #  string -  command string
        # Returns: Ngspice result code, or dictionary with result code and the message
        #
        # Example:
        #```
        # $sim command {circbyline v1 in 0 1}
        # $sim command bg_run
        #```
    }

    proc circuit {list} {
        # Sends an circuit to Ngspice in form of the list, each element is the lineof the netlist.
        #  list -  list of string
        # Returns: Ngspice result code
        #
        # Example:
        #```
        # set resDivCircuit {
        #     Resistor divider
        #     v1 in 0 1
        #     r1 in out 1e3
        #     r2 out 0 2e3
        #     .dc v1 0 5 0.1
        #     .save all
        #     .end
        # }
        # $sim circuit [split $resDivCircuit \n]
        # $sim command bg_run
        #```
    }

    proc plot {args} {
        # Returns current plot name if no arguments provided, names of all plots or all vectors names that belongs to
        # name of the provided plot.
        #  -all - switch to return all plots names
        #  -vecs plotname - switch with argument to get all vectors names belonging to `name` plot
        # Returns: current plot, or list of all plots, or list of all vectors
        #
        # Synopsis: -all
        # Synopsis: -vecs name
    }

    proc waitevent {args} {
        # Blocks until a named event is observed n number of times (or once), the instance is aborted/destroyed, 
        # or the timeout expires (if provided).
        #  name -  name of the event
        #  -n N - number of events that should happend for termination after waiting is started
        #  timeout_ms -  timeout in miliseconds, optional
        # Returns: dictionary with information about event
        #
        #
        #ruffopt includedformats html
        # <div style="ruff_bd">
        # <table class="ruff_deflist">
        # <tbody>
        # <tr><th>Event name</th><th>Ngspice callback function name</th><th>When it is called</th></tr>
        # <tr><td><code>send_char</code></td><td>SendChar</td><td>Whenever Ngspice produces a line of text on stdout or
        # stderr.</td></tr> <tr><td><code>send_stat</code></td><td>SendStat</td><td>When Ngspice’s simulation status
        # changes (e.g., --ready--, tran 50.1%, convergence messages).</td></tr>
        # <tr><td><code>controlled_exit</code></td><td>ControlledExit</td><td>When Ngspice exits, either due to an error
        # or after a quit command from Tcl/Ngspice.</td></tr>
        # <tr><td><code>send_data</code></td><td>SendData</td><td>During an analysis, whenever Ngspice sends a row of
        # vector values (time step or sweep point) to the callback.</td></tr>
        # <tr><td><code>send_init_data</code></td><td>SendInitData</td><td>At the start of a run, when Ngspice sends
        # metadata for all vectors in the current plot (names, types, indexes, real/complex).</td></tr>
        # <tr><td><code>bg_running</code></td><td>BGThreadRunning</td><td>When the Ngspice background thread changes
        # state: <code>running=false</code> means it just started running, <code>running=true</code> means it has
        # stopped.</td></tr> </tbody> </table> </div>
        #
        #ruffopt includedformats nroff
        #```
        # ┌───────────────────┬──────────────────────────────┬───────────────────────────────────────────────────────┐
        # │ Event name        │ Ngspice callback function    │ When it is called                                     │
        # ├───────────────────┼──────────────────────────────┼───────────────────────────────────────────────────────┤
        # │ send_char         │ SendChar                     │ Whenever Ngspice produces a line of text              │
        # │                   │                              │ on stdout or stderr.                                  │
        # ├───────────────────┼──────────────────────────────┼───────────────────────────────────────────────────────┤
        # │ send_stat         │ SendStat                     │ When Ngspice’s simulation status changes              │
        # │                   │                              │ (e.g., --ready--, tran 50.1%, convergence messages).  │
        # ├───────────────────┼──────────────────────────────┼───────────────────────────────────────────────────────┤
        # │ controlled_exit   │ ControlledExit               │ When Ngspice exits, either due to an error            │
        # │                   │                              │ or after a quit command from Tcl/Ngspice.             │
        # ├───────────────────┼──────────────────────────────┼───────────────────────────────────────────────────────┤
        # │ send_data         │ SendData                     │ During an analysis, whenever Ngspice sends            │
        # │                   │                              │ a row of vector values (time step or sweep point)     │
        # │                   │                              │ to the callback.                                      │
        # ├───────────────────┼──────────────────────────────┼───────────────────────────────────────────────────────┤
        # │ send_init_data    │ SendInitData                 │ At the start of a run, when Ngspice sends metadata    │
        # │                   │                              │ for all vectors in the current plot                   │
        # │                   │                              │ (names, types, indexes, real/complex).                │
        # ├───────────────────┼──────────────────────────────┼───────────────────────────────────────────────────────┤
        # │ bg_running        │ BGThreadRunning              │ When the Ngspice background thread changes state:     │
        # │                   │                              │ running=false → it just started running               │
        # │                   │                              │ running=true  → it has stopped.                       │
        # └───────────────────┴──────────────────────────────┴───────────────────────────────────────────────────────┘
        #```
        #
        #ruffopt includedformats markdown
        # | Event name        | Ngspice callback function name | When it is called                                                                                                                 |
        # |:------------------|:-------------------------------|:----------------------------------------------------------------------------------------------------------------------------------|
        # | `send_char`       | `SendChar`                     | Whenever Ngspice produces a line of text on stdout or stderr.                                                                     |
        # | `send_stat`       | `SendStat`                     | When Ngspice’s simulation status changes (e.g., --ready--, tran 50.1%, convergence messages).                                     |
        # | `controlled_exit` | `ControlledExit`               | When Ngspice exits, either due to an error or after a quit command from Tcl/Ngspice.                                              |
        # | `send_data`       | `SendData`                     | During an analysis, whenever Ngspice sends a row of vector values (time step or sweep point) to the callback.                     |
        # | `send_init_data`  | `SendInitData`                 | At the start of a run, when Ngspice sends metadata for all vectors in the current plot (names, types, indexes, real/complex).     |
        # | `bg_running`      | `BGThreadRunning`              | When the Ngspice background thread changes state: running=false means it just started running, running=true means it has stopped. |
        #
        #
        #ruffopt includedformats html
        # <div style="ruff_bd"> <table class="ruff_deflist"> <tbody> <tr><th>Time</th><th>Tcl Script
        # Action</th><th>Ngspice Core Activity</th><th>Bridge Callback Fired</th><th>Tcl Event Name Seen</th></tr>
        # <tr><td>t0</td><td><code>set s [..::new ..]</code></td><td>Library
        # loaded</td><td><em>(none)</em></td><td><em>(none)</em></td></tr> <tr><td>t1</td><td>$s<code>init</code></td>
        # <td>Initialization completed</td><td><em>(none)</em></td><td><em>(none)</em></td></tr>
        # <tr><td>t2</td><td><code>cirPass …</code></td><td>Parses circuit
        # line</td><td><code>send_char("...")</code></td><td><code>send_char</code></td></tr>
        # <tr><td>t3</td><td><em>(more circbyline calls)</em></td><td>Parses circuit
        # line</td><td><code>send_char("...")</code></td><td><code>send_char</code></td></tr>
        # <tr><td>t4</td><td>$s<code>command bg_run</code></td><td>Start background
        # simulation</td><td><code>bg_running(false)</code></td><td><code>bg_running</code></td></tr>
        # <tr><td>t5</td><td><em>(analysis setup)</em></td><td>Build vector
        # table</td><td><code>send_init_data()</code></td><td><code>send_init_data</code></td></tr>
        # <tr><td>t6</td><td><em>(analysis running)</em></td><td>First data
        # point</td><td><code>send_data(...)</code></td><td><code>send_data</code></td></tr>
        # <tr><td>t7</td><td><em>(analysis running)</em></td><td>More
        # points</td><td><code>send_data(...)</code></td><td><code>send_data</code></td></tr>
        # <tr><td>t8</td><td><em>(analysis running)</em></td><td>Status
        # change</td><td><code>send_stat("...")</code></td><td><code>send_stat</code></td></tr>
        # <tr><td>t9</td><td><em>(analysis completed)</em></td><td>Simulation
        # ready</td><td><code>send_stat("--ready--")</code></td><td><code>send_stat</code></td></tr>
        # <tr><td>t10</td><td><em>(BG thread exits)</em></td><td>Background thread
        # exits</td><td><code>bg_running(true)</code></td><td><code>bg_running</code></td></tr>
        # <tr><td>t11</td><td>$s<code>command quit</code></td><td>ngspice
        # quits</td><td><code>controlled_exit(...)</code></td><td><code>controlled_exit</code></td></tr>
        # <tr><td>t12</td><td>$s<code>destroy</code></td><td>Teardown</td><td><em>(no further
        # calls)</em></td><td><em>(command removed)</em></td></tr> </tbody> </table> </div>
        #
        #ruffopt includedformats nroff
        #```
        # ┌─────┬─────────────────────────┬─────────────────────────────┬─────────────────────────┬─────────────────────┐
        # │ Time│ Tcl Script Action       │ Ngspice Core Activity       │ Bridge Callback Fired   │ Tcl Event Name Seen │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t0  │ set s [..::new ..]      │ Library loaded              │ (none)                  │ (none)              │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t1  │ $s init                 │ Initialization completed    │ (none)                  │ (none)              │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t2  │ cirPass …               │ Parses circuit line         │ send_char("...")        │ send_char           │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t3  │ (more circbyline calls) │ Parses circuit line         │ send_char("...")        │ send_char           │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t4  │ $s command bg_run       │ Start background simulation │ bg_running(false)       │ bg_running          │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t5  │ (analysis setup)        │ Build vector table          │ send_init_data()        │ send_init_data      │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t6  │ (analysis running)      │ First data point            │ send_data(...)          │ send_data           │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t7  │ (analysis running)      │ More points                 │ send_data(...)          │ send_data           │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t8  │ (analysis running)      │ Status change               │ send_stat("...")        │ send_stat           │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t9  │ (analysis completed)    │ Simulation ready            │ send_stat("--ready--")  │ send_stat           │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t10 │ (BG thread exits)       │ Background thread exits     │ bg_running(true)        │ bg_running          │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t11 │ $s command quit         │ ngspice quits               │ controlled_exit(...)    │ controlled_exit     │
        # ├─────┼─────────────────────────┼─────────────────────────────┼─────────────────────────┼─────────────────────┤
        # │ t12 │ $s destroy              │ Teardown                    │ (no further calls)      │ (command removed)   │
        # └─────┴─────────────────────────┴─────────────────────────────┴─────────────────────────┴─────────────────────┘
        #```
        #
        #ruffopt includedformats markdown
        # | Time | Tcl Script Action         | Ngspice Core Activity       | Bridge Callback Fired    | Tcl Event Name Seen |
        # |------|---------------------------|-----------------------------|--------------------------|---------------------|
        # | t0   | `set s [..::new ..]`      | Library loaded              | *(none)*                 | *(none)*            |
        # | t1   | `$s init`                 | Initialization completed    | *(none)*                 | *(none)*            |
        # | t2   | `cirPass …`               | Parses circuit line         | `send_char("...")`       | `send_char`         |
        # | t3   | *(more circbyline calls)* | Parses circuit line         | `send_char("...")`       | `send_char`         |
        # | t4   | `$s command bg_run`       | Start background simulation | `bg_running(false)`      | `bg_running`        |
        # | t5   | *(analysis setup)*        | Build vector table          | `send_init_data()`       | `send_init_data`    |
        # | t6   | *(analysis running)*      | First data point            | `send_data(...)`         | `send_data`         |
        # | t7   | *(analysis running)*      | More points                 | `send_data(...)`         | `send_data`         |
        # | t8   | *(analysis running)*      | Status change               | `send_stat("...")`       | `send_stat`         |
        # | t9   | *(analysis completed)*    | Simulation ready            | `send_stat("--ready--")` | `send_stat`         |
        # | t10  | *(BG thread exits)*       | Background thread exits     | `bg_running(true)`       | `bg_running`        |
        # | t11  | `$s command quit`         | ngspice quits               | `controlled_exit(...)`   | `controlled_exit`   |
        # | t12  | `$s destroy`              | Teardown                    | *(no further calls)*     | *(command removed)* |
        #
        # Result dictionary of the command:
        #   - `fired` \- `0|1`, whether the event occurred during this wait
        #   - `count` \- cumulative total count for that event so far
        #   - `status` \- `ok | timeout | aborted`
        #
        # Examples:
        #```
        # $sim waitevent send_stat 1000
        # # -> {fired 1 count 1 status ok}
        # 
        # $sim waitevent send_stat 1000
        # # -> {fired 0 count 1 status timeout}  ;# nothing new in the next 1s
        #```
        #
        # If you want “fresh” waits, you can clear counts with `eventcounts -clear`.
        #
        # Synopsis: name ?-n N? ?timeout_ms?
    }

    proc vectors {args} {
        # Returns held **synchronously accumulated** vector values (built from `send_data` events) in a dict.
        #  -clear - empties the internal memory structure and returns **nothing**.
        # Returns: dict with vectors values accumulated up to this point in internal structure
        #
        # Example:
        #```
        # $sim vectors
        # # -> v(out) {0.0 0.1 0.2 ...} v(in) {...} v-sweep {...}
        #
        # $sim vectors -clear
        # # -> (no result; succeeds)
        #```
        #
        # Synopsis: ?-clear?
    }

    proc initvectors {args} {
        # Returns held **initial vector metadata** (built from send_init_data) in a dict.
        #  -clear - empties the internal memory structure and returns **nothing**.
        # Returns: dict with initial vector metadata saved in internal structure
        #
        # Example:
        #```
        # $sim initvectors
        # # -> out {number 1 real 1} in {number 2 real 1} v-sweep {number 3 real 1}
        #```
        #
        # **Warning**: accumulation of data **do not** continues after call `bg_run`, new metadata replace the old one
        # in the storage.
        #
        # Synopsis: ?-clear?
    }

    proc asyncvector {name} {
        # Fetches the current values of a named vector on demand via ngspice `ngGet_Vec_Info`. Works after the
        # simulation has produced any data (not necessarily the complete vector). By addding `-info` switch, vector
        # metadata is provided, i.e. type of the vector (current, voltage, time, etc), type of the numbers (complex or
        # real), and length of the vector.
        #  -info - if this switch is provided, commands return dictionary with vector metadata
        #  name - name of the vector
        # Returns: real vectors as a flat list of doubles, complex vectors as a list of `{re im}` pairs. Error if vector
        # does not exists.
        #
        # Example:
        #```
        # $sim initvectors
        # $sim asyncvector out
        # # -> {0.0 0.066666... 0.133333... ...}
        # 
        # $sim asyncvector V(9)
        # # -> {{0.01 0.00} {0.02 0.00} ...}   ;# if complex
        #```
        #
        # Synopsis: ?-info? name
    }

    proc messages {args} {
        # Queues of textual messages captured from Ngspice (stdout/stderr) and bridge status lines.
        #  -clear - empties the internal queue structure and returns **nothing**.
        # Returns: list of messages
        #
        # Example:
        #```
        # join [$sim messages] \n
        # # stdout ******
        # # stdout ** ngspice-44.x shared library
        # # ...
        # # # status[0]: --ready--
        #```
        #
        # **Warning**: accumulation of messages continues even if you run new circuit or analysis until you explicitly
        # clear the data storage.
        #
        # Synopsis: ?-clear?
    }

    proc eventcounts {args} {
        # Gets or reset the cumulative event counters for this simulator instance.
        #  -clear - zeros all counts and returns nothing.
        # Returns: returns a dict with keys as events names, and counts for each event as a value
        #
        # Example:
        #```
        # $sim eventcounts
        # # -> send_char N  send_stat N  controlled_exit N send_data N  send_init_data N  bg_running N
        #```
        #
        # Synopsis: ?-clear?
    }

    proc abort {} {
        # Sets an internal abort flag and wake any waiters (useful to force waitevent to return). This does **not** free
        # the instance.
    }

    proc isrunning {} {
        # Calls asynchronously to check if background thread is running.
        # Returns: `1` if thread is running, `0` otherwise.
    }

    proc destroy {} {
        # Deletes the instance command. In details:
        # - Marks the context as destroying
        # - Wakes any waiters
        # - Quiesces the ngspice background thread
        # - Defers and performs full cleanup
    }
}
